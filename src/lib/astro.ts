// API utilities for astronomical calculations
// Maintenant connect√© √† votre microservice !

import { MicroserviceAPI, BirthCoordinates, PlanetaryPosition } from './microservice-api';
import { HouseSystem } from './house-system';

interface BirthData {
  date: string;
  time: string;
  place: string;
}

export interface AstroData {
  sun: PlanetPosition;
  moon: PlanetPosition;
  mercury: PlanetPosition;
  venus: PlanetPosition;
  mars: PlanetPosition;
  jupiter: PlanetPosition;
  saturn: PlanetPosition;
  uranus: PlanetPosition;
  neptune: PlanetPosition;
  pluto: PlanetPosition;
  planets: PlanetaryPosition[]; // Ajout des donn√©es brutes JPL Horizons
  houseSystem: HouseSystem; // Syst√®me de maisons complet
}

interface PlanetPosition {
  longitude: number;
  latitude: number;
  sign: string;
  house: string;
}

/**
 * Fonction principale pour r√©cup√©rer les donn√©es astrologiques
 * Utilise votre microservice pour les calculs astrologiques
 */
export const fetchAstroData = async (birthData: BirthData): Promise<AstroData> => {
  try {
    console.log(`üåç [AstroService] D√©but du calcul astrologique pour:`, birthData);

    // R√©cup√©rer les coordonn√©es de la ville
    const coordinates = await MicroserviceAPI.getCityCoordinates(birthData.place);
    if (!coordinates) {
      throw new Error(`Coordonn√©es non trouv√©es pour: ${birthData.place}`);
    }

    console.log(`üåç [AstroService] Coordonn√©es trouv√©es pour ${birthData.place}:`, coordinates);

    // Convertir la date/heure locale en UTC
    const timeUtc = await MicroserviceAPI.convertLocalToUTC(birthData.date, birthData.time, birthData.place);
    console.log(`üïê [AstroService] Conversion heure locale ‚Üí UTC: ${birthData.date} ${birthData.time} ‚Üí ${timeUtc}`);

    // Utiliser la date originale et l'heure UTC convertie
    const date = birthData.date;

    // Appeler le microservice
    console.log(`üöÄ [AstroService] Appel au microservice...`);
    const microserviceData = await MicroserviceAPI.getAstroData(date, timeUtc, coordinates);
    
    console.log(`‚úÖ [AstroService] Donn√©es re√ßues du microservice !`);

    // Convertir vers le format AstroData
    const astroData = MicroserviceAPI.convertToAstroData(microserviceData, birthData);

    console.log(`üéØ [AstroService] Calcul astrologique termin√© avec succ√®s !`);
    return astroData;

  } catch (error) {
    console.error('‚ùå [AstroService] Erreur lors du calcul astrologique:', error);
    console.warn('üîÑ [AstroService] Utilisation des donn√©es mock en fallback...');
    
    // En cas d'erreur, utiliser les donn√©es mock
    return fetchMockAstroData(birthData);
  }
};

/**
 * Fonction mock pour simuler l'API (gard√©e en cas d'erreur du microservice)
 */
const fetchMockAstroData = async (birthData: BirthData): Promise<AstroData> => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1500));

  console.log('üì± Utilisation des donn√©es mock (mode d√©mo)');

  // Mock data - positions approximatives
  const mockData: AstroData = {
    sun: {
      longitude: 75.7, // 15¬∞42' G√©meaux
      latitude: 0.0,
      sign: 'G√©meaux',
      house: 'Maison VII'
    },
    moon: {
      longitude: 358.3, // 28¬∞17' Poissons
      latitude: -4.2,
      sign: 'Poissons',
      house: 'Maison IV'
    },
    mercury: {
      longitude: 92.6, // 2¬∞33' Cancer
      latitude: 1.8,
      sign: 'Cancer',
      house: 'Maison VIII'
    },
    venus: {
      longitude: 49.1, // 19¬∞08' Taureau
      latitude: -1.2,
      sign: 'Taureau',
      house: 'Maison VI'
    },
    mars: {
      longitude: 161.9, // 11¬∞54' Vierge
      latitude: -0.8,
      sign: 'Vierge',
      house: 'Maison X'
    },
    jupiter: {
      longitude: 187.5, // 7¬∞29' Balance
      latitude: 0.3,
      sign: 'Balance',
      house: 'Maison XI'
    },
    saturn: {
      longitude: 273.8, // 23¬∞46' Capricorne
      latitude: 1.1,
      sign: 'Capricorne',
      house: 'Maison II'
    },
    uranus: {
      longitude: 315.2, // 15¬∞12' Verseau
      latitude: -0.5,
      sign: 'Verseau',
      house: 'Maison III'
    },
    neptune: {
      longitude: 335.7, // 5¬∞42' Poissons
      latitude: 1.8,
      sign: 'Poissons',
      house: 'Maison IV'
    },
    pluto: {
      longitude: 275.3, // 25¬∞18' Capricorne
      latitude: 13.2,
      sign: 'Capricorne',
      house: 'Maison II'
    },
    planets: [], // Donn√©es mock vides pour les plan√®tes brutes
    houseSystem: {
      ascendant: { house: 1, longitude: 0, sign: 'B√©lier', degrees: 0, minutes: 0 },
      mc: { house: 10, longitude: 270, sign: 'Capricorne', degrees: 0, minutes: 0 },
      houses: [],
      system: 'Placidus' as const
    }
  };

  return mockData;
};

/**
 * G√©n√®re une interpr√©tation IA des positions plan√©taires
 */
export const generateAIInterpretation = async (astroData: AstroData): Promise<string> => {
  try {
    const prompt = `Analyse ce th√®me astral et donne une interpr√©tation d√©taill√©e en fran√ßais:
    ${JSON.stringify(astroData, null, 2)}
    Donne une interpr√©tation compl√®te et personnalis√©e.`;
    
    // Pour l'instant, retourner une interpr√©tation statique
    // Plus tard, on pourra int√©grer OpenAI ou une autre IA
    return `Interpr√©tation bas√©e sur les positions r√©elles des plan√®tes calcul√©es par votre microservice.
    
    Votre th√®me astral r√©v√®le une personnalit√© unique influenc√©e par les alignements c√©lestes au moment de votre naissance.
    
    Cette analyse utilise les donn√©es astronomiques les plus pr√©cises disponibles, calcul√©es par votre microservice sp√©cialis√©.`;
    
  } catch (error) {
    console.error('Erreur lors de la g√©n√©ration IA:', error);
    throw error;
  }
};

/**
 * Formate la longitude en degr√©s et minutes
 */
export const formatLongitude = (longitude: number): string => {
  const degrees = Math.floor(longitude);
  const minutes = Math.round((longitude - degrees) * 60);
  return `${degrees}¬∞${minutes.toString().padStart(2, '0')}'`;
};

/**
 * D√©termine le signe zodiacal bas√© sur la longitude
 */
export const getZodiacSign = (longitude: number): string => {
  const normalizedLongitude = ((longitude % 360) + 360) % 360;
  const signIndex = Math.floor(normalizedLongitude / 30);
  
  const signs = [
    'B√©lier', 'Taureau', 'G√©meaux', 'Cancer',
    'Lion', 'Vierge', 'Balance', 'Scorpion',
    'Sagittaire', 'Capricorne', 'Verseau', 'Poissons'
  ];
  
  return signs[signIndex] || 'Inconnu';
};

/**
 * D√©termine la maison astrologique bas√©e sur la longitude
 * Syst√®me Placidus simplifi√©
 */
export const getHouseName = (longitude: number): string => {
  const normalizedLongitude = ((longitude % 360) + 360) % 360;
  const houseIndex = Math.floor(normalizedLongitude / 30) + 1;
  
  const houses = [
    'Maison I', 'Maison II', 'Maison III', 'Maison IV',
    'Maison V', 'Maison VI', 'Maison VII', 'Maison VIII',
    'Maison IX', 'Maison X', 'Maison XI', 'Maison XII'
  ];
  
  return houses[houseIndex - 1] || 'Maison I';
};